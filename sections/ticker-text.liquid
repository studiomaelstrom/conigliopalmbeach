{% schema %}
{
  "name": "Ticker Text",
  "settings": [
    {
    "type": "range",
    "id": "text-size",
    "label": "Font Size",
    "min": 10,
    "max": 24,
    "unit": "px",
    "step": 1,
    "default": 16
  },
    {
    "type": "color",
    "id": "text-color",
    "label": "Text Color",
    "default": "#FFFFFF"
  },
    {
    "type": "color",
    "id": "background-color",
    "label": "Background Color",
    "default": "#000000"
  },

    {
    "type": "range",
    "id": "speed",
    "label": "Scroll Speed",
    "min": 0,
    "max": 150,
    "step": 10,
    "default": 50
  },
    {
    "type": "range",
    "id": "space",
    "label": "Spacing",
    "min": 0,
    "max": 20,
    "step": 1,
    "default": 5
  },
    {
    "type": "text",
    "id": "divider",
    "label": "Divider",
    "default": "â€¢"
  },
    {
    "type": "range",
    "id": "height",
    "label": "Height",
    "min": 1,
    "max": 8,
    "step": 1,
    "default": 3
  }
  ],"blocks": [
    {
    "type": "scroll-text",
    "name": "Text",
    "settings": [
    {
    "type": "text",
    "id": "text",
    "label": "Scrolling Text",
    "default": "Placeholder here"
    }
      ]
    }
  ],"presets": [
    {
      "name": "Ticker Text"
    }
  ]
}
{% endschema %}

<div class="ticker-wrapper">
  <div id="ticker_text" class="ticker-text">
    <!-- Repeated text blocks for continuous effect -->
    {%- for block in section.blocks -%}
      {{ block.settings.text }}
      {% if forloop.last == false %}
        {{ section.settings.divider | times: section.settings.space }}
      {% endif %}
    {%- endfor -%}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tickerText = document.getElementById('ticker_text');
  let moveTicker = () => {
    let currentTransform = parseFloat(window.getComputedStyle(tickerText).getPropertyValue('transform').split(',')[4]);
    if (isNaN(currentTransform)) { currentTransform = 0; }
    tickerText.style.transform = `translateX(${currentTransform - 1}px)`;

    // Reset position for infinite loop
    const tickerWidth = tickerText.offsetWidth;
    const wrapperWidth = tickerText.parentElement.offsetWidth;
    if (Math.abs(currentTransform) > tickerWidth) {
      tickerText.style.transform = 'translateX(0)';
    }
  };

  // Adjust the interval time to control speed, smaller is faster
  setInterval(moveTicker, 20);
});
</script>

{% style %}
  .ticker-wrapper {
    overflow: hidden;
    white-space: nowrap;
    background: {{ section.settings.background-color }};
    height: {{ section.settings.height }}rem;
    position: relative;
  }

  .ticker-text {
    position: absolute;
    white-space: nowrap;
    font-size: {{ section.settings.text-size }}px;
    color: {{ section.settings.text-color }};
    display: inline-block;
  }
    #ticker_text {
      display: flex; /* Changed to flex to have the spans side by side */
      font-size: {{ section.settings.text-size }}px;
      letter-spacing: 1px;
      color: {{ section.settings.text-color }};
      font-weight: 500;
      white-space: nowrap;
    }

    @keyframes tickerMove {
      0% {
        transform: translateX(0%);
      }
      100% {
        transform: translateX(-50%); /* Move left by half of the total width */
      }
    }
{% endstyle %}
